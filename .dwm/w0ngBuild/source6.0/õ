static void
bstack(Monitor *m) {
	int w, h, mh, mx, tx, ty, tw;
	unsigned int i, n;
	Client *c;

	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
	if(n == 0)
		return;
	if(n > m->nmasters[m->curtag]) { // if more clients than master slots
		mh = m->nmasters[m->curtag] ? m->mfacts[m->curtag] * m->wh : 0; // master height?
		tw = m->ww / (n - m->nmasters[m->curtag]); // stack width? // !!! TODO: stacki width leidmiseks jagatakse julmalt slave'ide arvuga!!
		ty = m->wy + mh; // stack y?
	} else {
		mh = m->wh; // master height?
		tw = m->ww;
		ty = m->wy;
	}
	/*if(n > m->nmaster) {*/
		/*mh = m->nmaster ? m->mfact * m->wh : 0;*/
		/*tw = m->ww / (n - m->nmaster);*/
		/*ty = m->wy + mh;*/
	/*}*/
	/*else {*/
		/*mh = m->wh;*/
		/*tw = m->ww;*/
		/*ty = m->wy;*/
	/*}*/
	for(i = mx = 0, tx = m->wx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
		if(i < m->nmasters[m->curtag]) {
			w = (m->ww - mx) / (MIN(n, m->nmasters[m->curtag]) - i);
			resize(c, m->wx + mx, m->wy, w - (2 * c->bw), mh - (2 * c->bw), False);
			mx += WIDTH(c);
		}
		else {
			h = m->wh - mh;
			resize(c, tx, ty, tw - (2 * c->bw), h - (2 * c->bw), False);
			if(tw != m->ww)
				tx += WIDTH(c);
		}
	}
}
