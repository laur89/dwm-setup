#!/bin/bash
#
# ~/bin/dwm-statusbar
#
# Status bar for dwm. Expanded from:
# https://bitbucket.org/jasonwryan/eeepc/src/73dadb289dead8ef17ef29a9315ba8f1706927cb/Scripts/dwm-status
# src from https://github.com/w0ng/bin
# http://archlinux.me/w0ng/2012/05/01/dwm-a-pretty-statusbar/

# nw interface & stats dir:
interface="eth1"
nwInterfaceStats="/sys/class/net/$interface/statistics"

# mail constants:
PREFIXES=( \
    "ix" \
    "sb"  \
)
MAILDIRS_NEW=( \
    "$HOME/mail/work/Inbox/new" \
    "$HOME/mail/work/Inbox/.sb/new" \
)

# Colour codes from dwm/config.h
colour_gry="\x01" # grey on black
colour_wht="\x02" # white on black
colour_dgry="\x04" # darkgrey on black
colour_blk="\x05" # black on darkgrey
colour_red="\x06" # colour_red on black
colour_grn="\x07" # green on black
colour_dylw="\x08" # orange on black
colour_ylw="\x09" # yellow on black
colour_blu="\x0A" # colour_blue on darkgrey
colour_mag="\x0B" # colour_magenta on darkgrey
colour_cyn="\x0C" # cyan on darkgrey

# Icon glyphs from font xbmicons.pcf
glyph_msc="\uE00E"
glyph_cpu="\uE00F"
glyph_mem="\uE010"
glyph_dl="\uE011"
glyph_ul="\uE012"
glyph_com="\uE013"
glyph_eml="\uE014"
glyph_vol="\uE015"
glyph_tim="\uE016"
glyph_tor="\uE017"
sep_solid="\uE01A"
sep_line="\uE01B"
sep_bar="\uE020"

print_song_info() {
  mpc_query="$(mpc current -f '[[[[%artist% \uE01B ]%title%]]|[%file%]]' | head -c 75)"
  if [[ -n "$mpc_query" ]]; then
    #song_info="Off"
    echo -ne "${colour_dgry}${sep_solid}${colour_cyn} ${glyph_msc} ${mpc_query} "
  fi
  #echo -ne "${colour_dgry}${sep_solid}${colour_cyn} ${glyph_msc} ${mpc_query} "
}

print_torrent_status() {
  torrent_status="$(transmission-remote -l | awk -F "  +" '$5 ~ /^[0-9]/ {print $5}')"
  if [[ ! $torrent_status ]]; then
    torrent_status="Idle"
  fi
  echo -ne "${colour_blk}${sep_solid}${colour_dylw} ${glyph_tor} ${torrent_status} "
}

print_email_unread() {
  local counter=0
  # inbox & scoreboards
  mailEcho=""

  #echo -ne "${colour_dgry}${sep_solid}${colour_ylw} ${glyph_eml}"
  #for maildir in $(find $HOME/mail/work/ \( -path "*Inbox/new" -o -path "*Inbox/.sb/new" \) -type d);do
  #for maildir in $(find $HOME/mail/work/inbox/new -type d); do
  for maildir in ${MAILDIRS_NEW[@]}; do
    unread_count="$(ls "$maildir" | wc -l)"
    if [[ "$unread_count" -gt 0 ]]; then
        mailEcho+=" ${PREFIXES[$counter]}:${unread_count}"
    fi
    let counter+=1
    # alternative:
    # let counter+=$(ls "${maildir}" | wc -l)
  done

  if [[ -n "$mailEcho" ]]; then
    echo -en "${colour_dgry}${sep_solid}${colour_ylw} ${glyph_eml}$mailEcho"
  fi
}

print_last_msg() {
  last_msg="$(cat $HOME/.logs/irssi_pipe)"
  echo -ne "${colour_blk}${sep_solid}${colour_dylw} ${glyph_com} ${last_msg} "
}

print_mem_used() {
  #mem_used="$(free -m | awk 'NR==3 {print $3}')" # used in MB
  #mem_used="$(free | awk '/buffers\/cache/{print $4/($3+$4) * 100.0;}')" # free in %
  #mem_used="$(free | awk '/buffers\/cache/{print $3/($3+$4) * 100.0;}')" # usage in %
  mem_used="$(free | awk '/buffers\/cache/{print int($3/($3+$4) * 100.0);}')" # usage in %, rounded
  echo -ne "${sep_line} ${glyph_mem} ${mem_used}% "
}

print_volume() {
  volume="$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')"
  echo -ne "${colour_dgry}${sep_solid}${colour_mag} ${glyph_vol} ${volume}% "
}

print_datetime() {
  datetime="$(date "+%a %d ${sep_line} %H:%M")"
  echo -ne "${colour_blk}${sep_solid}${colour_wht} ${glyph_tim} ${datetime} "
}

convertTxRates() {
    local value="$1"

    if [[ "$value" -lt 1024 ]]; then
        echo -ne "${value}B"
    elif [[ "$value" -ge 1048576 ]]; then
        echo -ne "$(( $value / 1048576 ))M"
    else
        echo -ne "$(( $value / 1024 ))K"
    fi
}

# network (from: http://dzen.geekmode.org/dwiki/doku.php?id=dzen:network-meter)
# cpu (from: https://bbs.archlinux.org/viewtopic.php?pid=661641#p661641)
rx_old=$(cat $nwInterfaceStats/rx_bytes)
tx_old=$(cat $nwInterfaceStats/tx_bytes)

while true; do
  # get new cpu idle and total usage
  eval $(awk '/^cpu /{print "cpu_idle_now=" $5 "; cpu_total_now=" $2+$3+$4+$5 }' /proc/stat)
  cpu_interval=$((cpu_total_now-${cpu_total_old:-0}))
  # calculate cpu usage (%)
  let cpu_used="100 * ($cpu_interval - ($cpu_idle_now-${cpu_idle_old:-0})) / $cpu_interval"

  # get new rx/tx counts
  rx_now=$(cat $nwInterfaceStats/rx_bytes)
  tx_now=$(cat $nwInterfaceStats/tx_bytes)
  # calculate the rate (K) and total (M)
  rx_rate=$(convertTxRates $(($rx_now-$rx_old)))
  tx_rate=$(convertTxRates $(($tx_now-$tx_old)))
  #  let rx_total=$rx_now/1048576
  #  let tx_total=$tx_now/1048576

  # output vars
  print_cpu_used() {
    printf "%-14b" "${colour_dgry}${sep_solid}${colour_blu} ${glyph_cpu} ${cpu_used}%"
  }
  print_rx_rate() {
    printf "%-15b" "${colour_blk}${sep_solid}${colour_grn} ${glyph_dl} ${rx_rate}"
  }
  print_tx_rate() {
    printf "%-14b" "${colour_gry}${sep_line}${colour_red} ${glyph_ul} ${tx_rate}"
  }

  # Pipe to status bar, not indented due to printing extra spaces/tabs
  xsetroot -name "$(print_song_info)\
$(print_email_unread)\
$(print_cpu_used)$(print_mem_used)\
$(print_rx_rate)$(print_tx_rate)\
$(print_volume)\
$(print_datetime)"
  # orig:
    # xsetroot -name "$(print_song_info)\
    #$(print_torrent_status)\
    #$(print_email_unread)\
    #$(print_last_msg)\
    #$(print_cpu_used)$(print_mem_used)\
    #$(print_rx_rate)$(print_tx_rate)\
    #$(print_volume)\
    #$(print_datetime)"

  # reset old rates
  rx_old=$rx_now
  tx_old=$tx_now
  cpu_idle_old=$cpu_idle_now
  cpu_total_old=$cpu_total_now
  # loop stats every 1 second
  sleep 1
done
